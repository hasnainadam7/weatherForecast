{"version":3,"sources":["components/weather/weatherCard.js","components/weather/Temp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","weatherInfo","temp","humidity","pressure","weathermood","name","speed","sunset","country","React","useState","weatherState","setWeatherState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","tempInfo","settempInfo","getWeatherInfo","a","apiUrl","fetch","response","json","data","main","weather","wind","sys","console","log","type","value","onChange","e","target","placeholder","autoFocus","id","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d9e719d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst WeatherCard = ({weatherInfo}) => {\r\n    const  {\r\n        temp, humidity, pressure, weathermood,  name, speed, sunset, country\r\n\r\n    }=weatherInfo\r\nconst [weatherState,setWeatherState]=React.useState()\r\nReact.useEffect(() => {\r\n    \r\n  if(weathermood){\r\n    switch (weathermood) {\r\n        \r\n            case \"Clouds\":setWeatherState(\"wi-day-cloudy\")\r\n            break;\r\n            case \"Rains\":setWeatherState(\"wi-fog\")\r\n            break;\r\n            case \"Clear\":setWeatherState(\"wi-day-Sunny\")\r\n            break;\r\n            case \"Mist\":setWeatherState(\"wi-dust\")\r\n            break;\r\n        default:\r\n            setWeatherState(\"wi-day-Sunny\")\r\n            break;\r\n    }\r\n  }\r\n}, [weathermood])\r\nlet sec=sunset;\r\nlet date=new Date(sec *1000);\r\nlet timeStr=`${date.getHours()}:${date.getMinutes()}`\r\n    return (\r\n        <>\r\n          \r\n            {/* Our temp card */}\r\n            <article className=\"widget\">\r\n                <div className=\"weatherIcon\">\r\n                    <i className={`wi ${weatherState}`}> </i>\r\n\r\n                </div>\r\n                <div className=\"weatherInfo\">\r\n                    <div className=\"temperature\">\r\n                        <span>\r\n                            {temp}&deg;\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        <div className=\"weatherCondition\">\r\n                            {weathermood}\r\n                        </div>\r\n                        <div className=\"place\">\r\n                            {name},{country}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"date\">\r\n                    {\r\n                        new Date().toLocaleString()\r\n                    }\r\n                </div>\r\n                {/*our 4 column Section  */}\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-sunset\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {timeStr} PM<br />sunset\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-humidity\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {humidity}<br />humidity\r\n                            </p>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div className=\"weather-extra-info\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-rain\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {pressure} <br />pressure\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-strong-wind\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {speed} <br />speed\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"./style.css\"\r\nimport WeatherCard from './weatherCard'\r\nconst Temp = () => {\r\n    //calling api \r\n    const [searchValue, setSearchValue] = useState(\"karachi\")\r\n    const [tempInfo, settempInfo] = useState({})\r\n    const getWeatherInfo = async () => {\r\n\r\n\r\n        try {\r\n            let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=\r\n                ${searchValue}&units=metric&appid=d1aef17e11e070369a48e2ade641b7d7`\r\n            const response = await fetch(apiUrl)\r\n            const data = await response.json()\r\n\r\n\r\n            const { temp, humidity, pressure } = data.main\r\n            const { main: weathermood, } = data.weather[0]\r\n            const { name } = data;\r\n            const { speed } = data.wind\r\n            const { country, sunset } = data.sys\r\n\r\n            const myNewWeatherInfo = {\r\n                temp, humidity, pressure, weathermood, name, speed, sunset, country\r\n\r\n            }\r\n            settempInfo(myNewWeatherInfo)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            getWeatherInfo();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n           <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input type=\"search\"\r\n                        value={searchValue}\r\n                        onChange={(e) => setSearchValue(e.target.value)}\r\n                        name=\"\"\r\n                        className=\"searchTerm\"\r\n                        placeholder=\"Search....\"\r\n                        autoFocus id=\"search\" />\r\n\r\n                    <button type=\"button\" className=\"searchButton\" onClick={() => getWeatherInfo()}>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n           <WeatherCard weatherInfo={tempInfo} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp\r\n","\nimport './App.css';\nimport Temp from './components/weather/Temp';\nfunction App() {\n  return (\n    < >\n    <Temp />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}